////////////////////////////////////////////////////////////////////////////////
/// \file	common.h
///	\brief Holds all common code definitions
///
///	\author: Ronald Sousa (@Opticalworm)
////////////////////////////////////////////////////////////////////////////////
#ifndef __COMMON_H__
#define __COMMON_H__
	#include <stdio.h>
	#include <stdlib.h>
	#include "stm32f0xx.h"

	/////////////////////////////////////////////////////////////////////////
	///	\brief	Defines the true state
	/////////////////////////////////////////////////////////////////////////
	#define TRUE 	1
	/////////////////////////////////////////////////////////////////////////
	///	\brief	Defines the false state
	/////////////////////////////////////////////////////////////////////////
	#define FALSE 	0

	/////////////////////////////////////////////////////////////////////////
	///	\brief	Defines the error state
	/////////////////////////////////////////////////////////////////////////
	#define ERROR 	-2

	/////////////////////////////////////////////////////////////////////////
	///	\brief	Defines the error for invalid pointers
	/////////////////////////////////////////////////////////////////////////
	#define INVALID_POINTER_ERROR 	-3


	/////////////////////////////////////////////////////////////////////////
	///	\brief	Defines the return states for the USART2 and FIFO
	/////////////////////////////////////////////////////////////////////////
    typedef enum {
	   Serial_ReturnState_OK,
	   Serial_RetrunState_PortNotOpenError,
	   Serial_ReturnState_InvalidPointer,
	   Serial_ReturnState_BufferEmpty,
	   Serial_ReturnState_BufferOverflow
    } usart2_ReturnStates;




	/////////////////////////////////////////////////////////////////////////
	///	\brief	Defines the return states for the Terminal and Terminal_Buffer
	/////////////////////////////////////////////////////////////////////////
    typedef enum Terminal_ReturnStates_Type {
    	Terminal_ReturnState_OK,
    	Terminal_ReturnState_NoMoreData,
    	Terminal_ReturnState_IsWhiteSpace,
    	Terminal_ReturnState_IsCarriageReturn,
    	Terminal_ReturnState_Pending,
    	Terminal_ReturnState_SerialError,
    	Terminal_ReturnState_TokenTooBig,
    	Terminal_ReturnState_TokenOverFlow,
		Terminal_ReturnState_BadPort,
		Terminal_ReturnState_BadPin,
		Terminal_ReturnState_BadType,
		Terminal_ReturnState_InvalidValue


    } Terminal_ReturnStates;



///////////////////////////////////////////////////////////////////////////////
    /// \brief Firmware version
    /// D = development version of the firmware. Should only be used for testing purposes
    /// C = concession version. This version of the firmware is usual custom for a customer. see CONCESSION_NUMBER
    /// P = production version
    ///
    /// \sa CONCESSION_NUMBER
    ///////////////////////////////////////////////////////////////////////////////
    #define FIRMWARE_VERSION "00.0001D"

    ///////////////////////////////////////////////////////////////////////////////
    /// \brief Hardware version
    ///////////////////////////////////////////////////////////////////////////////
    #define HARDWARE_VERSION "00"

    ///////////////////////////////////////////////////////////////////////////////
    /// \brief Hardware version
    ///////////////////////////////////////////////////////////////////////////////
    #define COMPILED_DATA_TIME "[" __DATE__ " " __TIME__ "]"

    ///////////////////////////////////////////////////////////////////////////////
    /// \brief Enables the debug interface and all debug message associated
    ///////////////////////////////////////////////////////////////////////////////
    #define EN_DEBUG_INTERFACE

    ///////////////////////////////////////////////////////////////////////////////
    /// \brief define the union type used to convert between types.
    ///////////////////////////////////////////////////////////////////////////////
    typedef union {
        long double d34_t;      ///< 64bit IEEE floating point number
        float       f32_t[2];   ///< 32bit IEEE float point number
        uint32_t    ui32_t[2];  ///< unsigned 32bit.
        int32_t     i32_t[2];   ///< signed 32bit.
        uint16_t    ui16_t[4];  ///< unsigned 16bit.
        int16_t     i16_t[4];   ///< signed 16bit.
        uint8_t     ui8_t[8];   ///< unsigned 8bit.
        int8_t      i8_t[8];    ///< singed 8bit.
    }DataConverter;

#endif
